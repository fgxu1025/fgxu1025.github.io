<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>盒子模型/个人笔记</title>
    <url>/2020/07/27/boxmodel/</url>
    <content><![CDATA[<p>简要总结下盒模型的相关知识。<br>首先要看清网页布局的本质：</p>
<ul>
<li>CSS在处理网页时，把每个元素包含在一个不可见的盒子中；</li>
<li>只需设置好每个盒子的大小，然后摆放盒子的位置；最后把网页元素比如文字图片链接等等，放入盒子里面。</li>
</ul>
<a id="more"></a>

<h2 id="1-标准盒子模型（Box-Model）"><a href="#1-标准盒子模型（Box-Model）" class="headerlink" title="1. 标准盒子模型（Box Model）"></a>1. 标准盒子模型（Box Model）</h2><ul>
<li>一个标准盒模型主要由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li>
</ul>
<p><img data-src="https://i.loli.net/2020/07/27/5lOai9yuvSHFA4d.gif" alt=""></p>
<h3 id="内容区（content）"><a href="#内容区（content）" class="headerlink" title="内容区（content）"></a>内容区（content）</h3><ul>
<li><p>内容区指的是盒子中放置内容的区域，也就是元素 中的文本内容，子元素都是存在于内容区中的；</p>
</li>
<li><p>通过width和height两个属性可以设置内容区的大 小。</p>
</li>
<li><p>若没有为元素设置内边距和边框，则内容区大小 默认和盒子大小一致。</p>
</li>
</ul>
<h3 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h3><p>可以在元素周围创建边框，边框是元素可见框的最外部。</p>
<p>​    <img data-src="https://i.loli.net/2020/07/27/dmXi86GlHsZcOTF.png" alt=""></p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td align="center">定义边框粗细，单位是px</td>
</tr>
<tr>
<td>border-style</td>
<td align="center">边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td align="center">边框颜色</td>
</tr>
</tbody></table>
<ul>
<li><p>边框的样式：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
</li>
<li><p>边框综合设置</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  没有顺序</span><br></pre></td></tr></table></figure>



<ul>
<li>盒子边框写法总结表</li>
</ul>
<p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p>
<table>
<thead>
<tr>
<th align="left">上边框</th>
<th align="left">下边框</th>
<th align="left">左边框</th>
<th align="left">右边框</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-top-style:样式;</td>
<td align="left">border-bottom-style:样式;</td>
<td align="left">border-left-style:样式;</td>
<td align="left">border-right-style:样式;</td>
</tr>
<tr>
<td align="left">border-top-width:宽度;</td>
<td align="left">border- bottom-width:宽度;</td>
<td align="left">border-left-width:宽度;</td>
<td align="left">border-right-width:宽度;</td>
</tr>
<tr>
<td align="left">border-top-color:颜色;</td>
<td align="left">border- bottom-color:颜色;</td>
<td align="left">border-left-color:颜色;</td>
<td align="left">border-right-color:颜色;</td>
</tr>
<tr>
<td align="left">border-top:宽度 样式 颜色;</td>
<td align="left">border-bottom:宽度 样式 颜色;</td>
<td align="left">border-left:宽度 样式 颜色;</td>
<td align="left">border-right:宽度 样式 颜色;</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>注意：</strong>表格的细线边框</p>
<p><img data-src="https://i.loli.net/2020/07/27/Pxnjqu1ocpWz9i6.png" alt=""></p>
</li>
<li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p>
</li>
<li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p>
</li>
<li><p>通过css属性进行设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>border-collapse: collapse; 表示相邻边框合并在一起。</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	<span class="selector-tag">table</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">		<span class="attribute">text-align</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://i.loli.net/2020/07/27/YXaWZBFvSLf9zdj.png" alt=""></p>
<h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>padding属性用于设置内边距。 <strong>是指 边框与内容之间的距离。</strong></p>
<p><img data-src="https://i.loli.net/2020/07/27/RmcZQ7ehlUjGYar.png" alt=""></p>
<ul>
<li>设置</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>padding-left</td>
<td align="left">左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td align="left">右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td align="left">上内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td align="left">下内边距</td>
</tr>
</tbody></table>
<p>当给盒子指定padding值之后， 会发生2件事情：</p>
<ol>
<li>内容和边框 有了距离，添加了内边距。</li>
<li>撑大盒子。<strong>解决方法：</strong>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小</li>
</ol>
<p><strong>重点：</strong>padding不影响盒子大小情况  </p>
<blockquote>
<p><strong>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</strong></p>
</blockquote>
<p> <strong>注意：  后面跟几个数值表示的意思是不一样的。</strong></p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1个值</td>
<td>padding：上下左右内边距;</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下内边距    左右内边距 ；</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上内边距   左右内边距   下内边距；</td>
</tr>
<tr>
<td>4个值</td>
<td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td>
</tr>
</tbody></table>
<p><img data-src="https://i.loli.net/2020/07/27/uVQLOMqZsIbc8x1.jpg" alt=""></p>
<p>内边距会影响盒子的可见框的大小，元素的背景会延伸到内边距。</p>
<h4 id="盒子的大小由内容区、内边距和边框共同决定"><a href="#盒子的大小由内容区、内边距和边框共同决定" class="headerlink" title="盒子的大小由内容区、内边距和边框共同决定"></a>盒子的大小由内容区、内边距和边框共同决定</h4><ul>
<li>盒子可见框的宽度 = border-left-width + padding-left + width + padding-right + border-right-width</li>
<li>盒子可见框的高度 = border-top-width + padding-top + height + padding-bottom + border-bottom-width</li>
<li>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框</li>
</ul>
<h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p><img data-src="https://i.loli.net/2020/07/27/pk6e8wNMPJ92zIZ.png" alt=""></p>
<h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><p>​    margin属性用于设置外边距。  margin就是控制<strong>盒子和盒子之间的距离</strong></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>margin-left</td>
<td align="left">左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td align="left">右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td align="left">上外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td align="left">下外边距</td>
</tr>
</tbody></table>
<p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p>
<h4 id="块级盒子水平居中"><a href="#块级盒子水平居中" class="headerlink" title="块级盒子水平居中"></a>块级盒子水平居中</h4><ul>
<li>可以让一个块级盒子实现水平居中必须：<ul>
<li>盒子必须指定了宽度（width）</li>
<li>然后就给<strong>左右的外边距都设置为auto</strong>，</li>
</ul>
</li>
</ul>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">960px</span>; </span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见的写法，以下下三种都可以。</p>
<ul>
<li>margin-left: auto;   margin-right: auto;</li>
<li>margin: auto;</li>
<li>margin: 0 auto;</li>
</ul>
<h4 id="文字居中和盒子居中区别"><a href="#文字居中和盒子居中区别" class="headerlink" title="文字居中和盒子居中区别"></a>文字居中和盒子居中区别</h4><ol>
<li>盒子内的文字水平居中是  text-align:  center,  而且还可以让 行内元素和行内块居中对齐</li>
<li>块级盒子水平居中  左右margin 改为 auto </li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;  <span class="comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure>

<h4 id="插入图片和背景图片区别"><a href="#插入图片和背景图片区别" class="headerlink" title="插入图片和背景图片区别"></a>插入图片和背景图片区别</h4><ol>
<li>插入图片，比如产品展示类  移动位置只能靠盒模型 padding margin</li>
<li>背景图片，一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">	<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line">	<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更改位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="清除元素的默认内外边距-重要"><a href="#清除元素的默认内外边距-重要" class="headerlink" title="清除元素的默认内外边距(重要)"></a>清除元素的默认内外边距(重要)</h4><p><img data-src="https://i.loli.net/2020/07/27/J4XrsyZYQaB83Sc.png" alt=""></p>
<p>为了更灵活方便地控制网页中的元素，制作网页时，需要将元素的默认内外边距清除</p>
<p>代码： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：  </p>
<ul>
<li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li>
</ul>
<h4 id="外边距合并（盒子塌陷问题）"><a href="#外边距合并（盒子塌陷问题）" class="headerlink" title="外边距合并（盒子塌陷问题）"></a>外边距合并（盒子塌陷问题）</h4><p>使用margin定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p>
<h5 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1). 相邻块元素垂直外边距的合并"></a>(1). 相邻块元素垂直外边距的合并</h5><ul>
<li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom</li>
<li>下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和</li>
<li><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li>
</ul>
<p><img data-src="https://i.loli.net/2020/07/27/l9tjbG46yei2oDQ.png" alt=""></p>
<p><strong>解决方案：尽量给只给一个盒子添加margin值</strong>。</p>
<h5 id="2-嵌套块元素垂直外边距的合并（塌陷）"><a href="#2-嵌套块元素垂直外边距的合并（塌陷）" class="headerlink" title="(2). 嵌套块元素垂直外边距的合并（塌陷）"></a>(2). 嵌套块元素垂直外边距的合并（塌陷）</h5><ul>
<li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</li>
<li>父元素的上外边距会与子元素的上外边距发生合并</li>
<li>合并后的外边距为两者中的较大者</li>
</ul>
<p><img data-src="https://i.loli.net/2020/07/27/cG47bDQgYzjuCKA.png" alt=""></p>
<p><strong>解决方案：</strong></p>
<ol>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
<p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p>
<h3 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h3><p>根据稳定性来分，建议如下：</p>
<p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>margin 会有外边距合并   所以最后使用。</li>
<li>padding  会影响盒子大小， 需要进行加减计算 其次使用。</li>
<li>width   没有问题 我们经常使用宽度剩余法 高度剩余法来做。</li>
</ul>
</li>
</ul>
<h2 id="2-IE-盒子模型"><a href="#2-IE-盒子模型" class="headerlink" title="2. IE 盒子模型"></a>2. IE 盒子模型</h2><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p>
<p>IE盒子模型（css3盒子模型）：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p>
<p>也就是说， padding 和 border 不会撑大盒子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure>

<p>移动端大量使用 CSS3盒子模型box-sizing</p>
<p>PC端如果完全需要兼容，需要用传统盒模型，如果不考虑兼容性，就可选择 CSS3 盒子模型。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>个人总结</tag>
      </tags>
  </entry>
</search>
